name: Manual terraform job
on:
  workflow_dispatch:
    inputs:
      project:
        description: Project
        default: nia
        type: choice
        options:
          - nia

      environment:
        description: Environment
        required: true
        default: ptl
        type: choice
        options:
          - ptl
          - account

      action:
        description: Action
        required: true
        default: plan
        type: choice
        options:
          - Plan
          - Apply
          - Plan Destroy
          - Destroy

      component:
        description: Component
        default: gp2gp
        type: choice
        options:
          - base
          - nhais
          - OneOneOne
          - mhs
          - account
          - fake_mesh
          - nhais_responder
          - gp2gp
          - lab-results
          - pss

      build_ids:
        description: 'Component Build Ids: (i.e gp2gp=PR-855-10-50e5138,gpcc=PR-811-1-20e3452)'
        type: string

      additional_variables:
        description: 'Additional terraform variables: (ie variable1=value1,variable2=value2)'
        type: string

      targets:
        description: 'Resources to be targeted by plan/apply/destroy (format: [resource type1].[resource_name1],[resource type2].[resource name2])'
        type: string

      repository:
        description: 'Git repository from which TF will be read (format: [Organisation/Repository])'
        required: true
        default: NHSDigital/integration-adaptors-deployment
        type: string

      branch:
        description: Git branch from which TF will be taken
        required: true
        default: main
        type: string

jobs:
  call-validate-component-build-ids:
    name: Process Build Ids
    uses: ./.github/workflows/validate-build-ids.yml
    permissions:
      id-token: write
      contents: read
    with:
      component: ${{ inputs.component }}
      component_build_ids: ${{ inputs.build_ids }}
    secrets: inherit

  retrieve-and-process-aws-secrets:
    name: Process AWS Secrets
    uses: ./.github/workflows/get-aws-secrets.yml
    permissions:
      id-token: write
      contents: read
    with:
      environment: ${{ inputs.environment }}
    secrets: inherit

  process-terraform-vars-file-content:
    name: Create Terraform Vars File Content
    runs-on: ubuntu-latest
    needs: [call-validate-component-build-ids, retrieve-and-process-aws-secrets]
    outputs:
      terraform_vars_file_content: ${{ steps.create-terraform-variables-file-content.outputs.terraform_vars_file_content }}

    steps:
      - name: Prepare Additional Variables
        id: prepare-additional-variables
        run: |
          echo "${{ inputs.additional_variables }}"
          additional_variables_json=$(echo '{}' | jq '.')
          
          IFS=',' read -ra pairs <<< "${{ inputs.additional_variables }}"
          for pair in "${pairs[@]}"; do
            IFS='=' read -r variable value <<< "$pair"
              additional_variables_json=$(echo "$additional_variables_json" | jq -c --arg key "$variable" --arg value "$value" '.[$key] = ($value | fromjson? // $value)')
          done
          
          echo "$additional_variables_json"
          echo "additional_variables=$additional_variables_json" >> $GITHUB_OUTPUT

      - name: Create Terraform Variables File Content
        id: create-terraform-variables-file-content
        run: |
          echo "Using components with build Ids: $build_ids"
          echo "Using additional variables: $additional_variables"
          
          terraform_vars_file_content_json=$(jq -c -n \
            --argjson aws_secrets '${{ needs.retrieve-and-process-aws-secrets.outputs.aws_secrets }}' \
            --argjson build_ids '${{ needs.call-validate-component-build-ids.outputs.validated_build_ids }}' \
            --argjson additional_variables '${{ steps.prepare-additional-variables.outputs.additional_variables }}' \
            '$aws_secrets + $build_ids + $additional_variables')
          
          echo "terraform_vars_file_content=$terraform_vars_file_content_json" >> $GITHUB_OUTPUT

  setup-and-run-terraform-job:
    name: Run Terraform Job
    runs-on: ubuntu-latest
    needs: [process-terraform-vars-file-content]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: github_manual_terraform_job
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Checkout Terraform Repository
        uses: actions/checkout@v4.1.7
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.branch }}

      - name: Write Terraform Vars File
        run: |
          echo '${{ needs.process-terraform-vars-file-content.outputs.terraform_vars_file_content }}' | jq -r 'to_entries | .[] | "\(.key) = \"\(.value)\""' > aws/etc/secrets.tfvars

      - name: "Run Terraform: Init"
        run: |
          git clone https://github.com/tfutils/tfenv.git .tfenv
          
          cd aws/components/${{ inputs.component }}
          
          ../../../.tfenv/bin/tfenv install
          
          terraform init \
            -backend-config='bucket=${{ secrets.TF_STATE_BUCKET }}'  \
            -backend-config='region=${{ secrets.AWS_REGION }}' \
            -backend-config='key=${{ inputs.project }}-${{ inputs.environment }}-${{ inputs.component }}.tfstate' \
            -input=false

      - name: "Run Terraform: Plan"
        run: |
          cd 'aws/components/${{ inputs.component }}'
          terraform plan \
            -var region=${{ secrets.AWS_REGION }} \
            -var project=${{ inputs.project }} \
            -var environment=${{ inputs.environment }} \
            -var tf_state_bucket=${{ secrets.TF_STATE_BUCKET }} \
            -var-file='../../etc/global.tfvars' \
            -var-file='../../etc/${{ secrets.AWS_REGION }}_${{ inputs.environment }}.tfvars' \
            -var-file='../../etc/secrets.tfvars'

      - name: "Run Terraform: Apply"
        if: inputs.action == 'Apply'
        run: echo "Terraform Apply ${{ inputs.action }}"

      - name: "Run Terraform: Plan Destroy"
        if: inputs.action == 'Plan Destroy'
        run: echo "Terraform Plan Destroy ${{ inputs.action }}"

      - name: "Run Terraform: Destroy"
        if: inputs.action == 'Destroy'
        run: echo "Terraform Destroy ${{ inputs.action }}"