name: Retrieve and Validate Build Ids

on:
  workflow_call:
    inputs:
      component:
        description: Application Component
        required: true
        type: string
      component_build_ids:
        description: 'Component Build Ids: (i.e gp2gp=PR-855-10-50e5138,gpcc=PR-811-1-20e3452)'
        required: false
        type: string
    outputs:
      validated_build_ids:
        description: The validated build ids as JSON
        value: ${{ jobs.validate-build-ids.outputs.validated_build_ids }}

jobs:
  validate-build-ids:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      validated_build_ids: ${{ steps.validate.outputs.validated_build_ids }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_TO_ASSUME }}"
          role-session-name: github_manual_terraform_job
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set empty validated_build_ids for 'account' component
        if: ${{ inputs.component == 'account' }}
        id: set-empty-for-account
        run: echo "validated_build_ids={}" >> $GITHUB_OUTPUT

      - name: Retrieve and Validate component build ids
        if: ${{ inputs.component != 'account' }}
        id: validate
        run: |
          
          # Parse the input string into an associative array as 'build_ids_map'
          declare -A build_ids_map
          IFS=',' read -ra pairs <<< "${{ inputs.component_build_ids }}"
          for pair in "${pairs[@]}"; do
            IFS='=' read -r component build_id <<< "$pair"
            build_ids_map["$component"]="$build_id"
          done

          # Initialize JSON output as 'validated_build_id_json'
          validated_build_ids_json=$(echo '{}' | jq '.')

          input_component=${{ inputs.component }}
          echo "Processing build ids for '$input_component'..." 
          
          # Check if the specified component exists in the component_build_ids    
          if [[ -z "${build_ids_map[$input_component]}" ]]; then

            # get "main" branch for repository as 'primary_branch'
            if [ "$input_component" = "nhais" ]; then
              primary_branch="develop"
            elif [ "$input_component" = "111" ]; then
              primary_branch="master"
            elif [ "$input_component" = "nhais-fake-responder" ]; then
              primary_branch="origin-develop"
            else
              primary_branch="main"
            fi
          
            echo "Component '$input_component' not found in provided build ids."
            echo "Retrieving latest build tag from '$primary_branch' branch..."      
          
            latest_tag=$(aws ecr describe-images \
              --repository-name "$input_component" \
              --region "${{ secrets.AWS_REGION }}" \
              --query "sort_by(imageDetails[?starts_with(imageTags[0], \`$primary_branch\`)], &imagePushedAt)[-1].imageTags[0]" \
              --output text | head -n 1)

            # format the latest tag to ensure only the first build tag is used
            latest_tag=$(echo "$latest_tag" | tr -d '\n' | awk '{print $1}')

            if [[ "$latest_tag" == "None" || -z "$latest_tag" ]]; then
              echo "Error: No builds found on '$primary_branch' branch for component '$input_component'."
              exit 1
            else
              validated_build_ids_json=$(echo "$validated_build_ids_json" \
                                          | jq -c --arg key "${input_component}_build_id" \
                                          --arg value "$latest_tag" \
                                          '.[$key] = $value')
          
              echo "Found latest build tag for '$input_component': '$latest_tag'"
            fi
          fi
          
          if [[ "$input_component"=="gp2gp" && -z "${build_ids_map[gpc-consumer]}" ]]; then
            echo "Provided component is gp2gp and build tag has been not provided for gpc-consumer".
            echo "Retrieving latest build tag for 'gpc-consumer'..."
          
            latest_tag=$(aws ecr describe-images \
              --repository-name "gpc-consumer" \
              --region "${{ secrets.AWS_REGION }}" \
              --query 'sort_by(imageDetails[?starts_with(imageTags[0], `main`)], &imagePushedAt)[-1].imageTags[0]' \
              --output text | head -n 1)

            # format the latest tag to ensure only the first build tag is used
            latest_tag=$(echo "$latest_tag" | tr -d '\n' | awk '{print $1}')

            if [[ "$latest_tag" == "None" || -z "$latest_tag" ]]; then
              echo "Error: No builds found on 'main' branch for component 'gpc-consumer'."
              exit 1
            else
              validated_build_ids_json=$(echo "$validated_build_ids_json" \
                                          | jq -c --arg key "gpc-consumer_build_id" \
                                          --arg value "$latest_tag" \
                                          '.[$key] = $value')
          
              echo "Found latest build tag for 'gpc-consumer': '$latest_tag'."
            fi
          fi

          # Check existence of each image build_id in AWS ECR
          for component in "${!build_ids_map[@]}"; do
            build_id="${build_ids_map[$component]}"
            echo "Validating $component with build tag: $build_id"

            # Check if the image build_id exists in the ECR repository
            result=$(aws ecr describe-images \
              --repository-name "$component" \
              --region "${{ secrets.AWS_REGION }}" \
              --query "imageDetails[?imageTags && contains(imageTags, '$build_id')]" \
              --output json)

            if [[ "$result" == "[]" ]]; then
              echo "Error: Build tag '$build_id' does not exist for component '$component'."
              exit 1
            else
              echo "Found build tag for component '$component': '$build_id'."
              validated_build_ids_json=$(echo "$validated_build_ids_json" \
                                          | jq -c --arg key "${component}_build_id" \
                                          --arg value "$build_id" \
                                          '.[$key] = $value')
            fi
          done

          echo "validated_build_ids=$validated_build_ids_json" >> $GITHUB_OUTPUT